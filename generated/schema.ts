// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Order entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Order entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Order", id.toString(), this);
  }

  static load(id: string): Order | null {
    return store.get("Order", id) as Order | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get borrowingPeriod(): BigInt {
    let value = this.get("borrowingPeriod");
    return value.toBigInt();
  }

  set borrowingPeriod(value: BigInt) {
    this.set("borrowingPeriod", Value.fromBigInt(value));
  }

  get requestAmount(): BigInt {
    let value = this.get("requestAmount");
    return value.toBigInt();
  }

  set requestAmount(value: BigInt) {
    this.set("requestAmount", Value.fromBigInt(value));
  }

  get createdBlockTimestamp(): BigInt {
    let value = this.get("createdBlockTimestamp");
    return value.toBigInt();
  }

  set createdBlockTimestamp(value: BigInt) {
    this.set("createdBlockTimestamp", Value.fromBigInt(value));
  }

  get offeredBlockTimestamp(): BigInt {
    let value = this.get("offeredBlockTimestamp");
    return value.toBigInt();
  }

  set offeredBlockTimestamp(value: BigInt) {
    this.set("offeredBlockTimestamp", Value.fromBigInt(value));
  }

  get offer(): string {
    let value = this.get("offer");
    return value.toString();
  }

  set offer(value: string) {
    this.set("offer", Value.fromString(value));
  }
}

export class Offer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Offer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Offer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Offer", id.toString(), this);
  }

  static load(id: string): Offer | null {
    return store.get("Offer", id) as Offer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get order(): string {
    let value = this.get("order");
    return value.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }

  get offeror(): string {
    let value = this.get("offeror");
    return value.toString();
  }

  set offeror(value: string) {
    this.set("offeror", Value.fromString(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    return value.toBigInt();
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get createdBlockTimestamp(): BigInt {
    let value = this.get("createdBlockTimestamp");
    return value.toBigInt();
  }

  set createdBlockTimestamp(value: BigInt) {
    this.set("createdBlockTimestamp", Value.fromBigInt(value));
  }
}
