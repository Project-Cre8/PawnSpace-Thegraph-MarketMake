// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SpaceCreated extends ethereum.Event {
  get params(): SpaceCreated__Params {
    return new SpaceCreated__Params(this);
  }
}

export class SpaceCreated__Params {
  _event: SpaceCreated;

  constructor(event: SpaceCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get space(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get length(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PawnFactory extends ethereum.SmartContract {
  static bind(address: Address): PawnFactory {
    return new PawnFactory("PawnFactory", address);
  }

  allSpaces(param0: BigInt): Address {
    let result = super.call("allSpaces", "allSpaces(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allSpaces(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allSpaces", "allSpaces(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeToSetter(): Address {
    let result = super.call("feeToSetter", "feeToSetter():(address)", []);

    return result[0].toAddress();
  }

  try_feeToSetter(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeToSetter", "feeToSetter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSpace(param0: Address): Address {
    let result = super.call("getSpace", "getSpace(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_getSpace(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getSpace", "getSpace(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allSpacesLength(): BigInt {
    let result = super.call(
      "allSpacesLength",
      "allSpacesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allSpacesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allSpacesLength",
      "allSpacesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createSpace(token: Address): Address {
    let result = super.call("createSpace", "createSpace(address):(address)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toAddress();
  }

  try_createSpace(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSpace",
      "createSpace(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeToSetter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateSpaceCall extends ethereum.Call {
  get inputs(): CreateSpaceCall__Inputs {
    return new CreateSpaceCall__Inputs(this);
  }

  get outputs(): CreateSpaceCall__Outputs {
    return new CreateSpaceCall__Outputs(this);
  }
}

export class CreateSpaceCall__Inputs {
  _call: CreateSpaceCall;

  constructor(call: CreateSpaceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateSpaceCall__Outputs {
  _call: CreateSpaceCall;

  constructor(call: CreateSpaceCall) {
    this._call = call;
  }

  get space(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetFeeToCall extends ethereum.Call {
  get inputs(): SetFeeToCall__Inputs {
    return new SetFeeToCall__Inputs(this);
  }

  get outputs(): SetFeeToCall__Outputs {
    return new SetFeeToCall__Outputs(this);
  }
}

export class SetFeeToCall__Inputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get _feeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToCall__Outputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }
}

export class SetFeeToSetterCall extends ethereum.Call {
  get inputs(): SetFeeToSetterCall__Inputs {
    return new SetFeeToSetterCall__Inputs(this);
  }

  get outputs(): SetFeeToSetterCall__Outputs {
    return new SetFeeToSetterCall__Outputs(this);
  }
}

export class SetFeeToSetterCall__Inputs {
  _call: SetFeeToSetterCall;

  constructor(call: SetFeeToSetterCall) {
    this._call = call;
  }

  get _feeToSetter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToSetterCall__Outputs {
  _call: SetFeeToSetterCall;

  constructor(call: SetFeeToSetterCall) {
    this._call = call;
  }
}
